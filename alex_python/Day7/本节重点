
    面向对象高级语法部分
        经典类vs新式类　　
        静态方法、类方法、属性方法
        类的特殊方法
        反射
    异常处理
    Socket开发基础
    作业：开发一个支持多用户在线的FTP程序
类：
    属性
        实例变量，放在每个实例的内存里
        类变量，所有实例共享内存
        私有属性__var

    方法
        构造方法，初始化实例的时候
        析构方法或者析构函数，
        私有方法

对象：实例化一个类之后得到的对象
封装：把一些功能的实现细节不对外暴露
继承：
    组合？
    代码的重用
    一般是单继承，支持多继承
        2.7 经典类，深度优先，新式类，广度优先
        3.x 均是广度优先
        class Foo(object)； 此为新式类
多态：接口重用，一种接口，多种实现


静态方法：
只是名义上归类管理，实际上在静态方法里访问不了类或者实例中的任何属性
类方法:只能访问类变量，不能访问实例变量
属性方法：就是把一个方法变成一个静态属性 调用的时候不能传参数了
如果想赋值的话，要先存一个
6.avi 没搞懂
7.avi 讲反射的重要性


Socket网络编程
所以网络的基础，封装成socket。自己写一个协议，必须知道socket怎么处理


反射：
    hasattr(obj,name_str) ,判断一个obj里是否有对应的name_str字符串的方法映射
    gettattr(obj,name_str),根据字符串去获取obj对象里的对应的方法的内存地址
    setattr(obj,'y',z)  is equivalent to " x.y = v"
    delattr()
异常：
    try :
         code
    except (Error1,Error2) as e:
    print e

    exception Exception :抓住所有的错误：不建议使用
